IoT Security Internship — Anirudh Oppiliappan
=============================================

3rd June 2019 - 18th June 2019
------------------------------

- Started with the IoT Exploitation Handbook and video series.
- Explored firmware reverse engineering
    1. Reversed what we thought was the firmware for the iBall router
    2. Performed static analysis on the binaries in the filesystem
- Setup Raspberry Pi for practicing ARM RE and exploitation
- Dived into ARM exploitation and reverse engineering
    1. Learnt ARM assembly
    2. Reversing basic programs
    3. Stack based exploitation and ROP (wrote a blog post on this)
    4. Heap exploitation
- Studied the IoT Security Maturity Model (SMM)
    * Made a presentation for the same
- Began learning MIPS
    1. Learnt MIPS assembly
    2. Same exploitation techniques
- Attempted to reverse engineer HCI Bluetooth packet log between my smartphone and smartwatch
    1. Acheived extraction of some forensic data
- Began writing MIPS/ARM based exploitation challenges to be hosted on SL7's GitHub

18th June 2019
-------------

- Wrote a post for the SL7 blog, titled "ARM Exploitation Series #1 — Introduction to the ARM Architecture"
- Explored the new Intel Galileo Gen 2 board
- Continued with my MIPS exploitation research

19th June 2019
--------------

- Continued research in MIPS exploitation. Encountered unsolvable error,
and hence put MIPS research on hold.
- Returned to ARM exploitation. Solved and created CTF challenges to be hosted
on SL7's GitHub.

20th June 2019
--------------

- Put MIPS exploitation research on hold, until I find reliable hardware/software to emulate with
- Worked on ARM exploitation for a while
- Tried performing memory analysis of ESP8266, but Volatility doesn't support it
- Started building esp-open-sdk for Xtensa toolchain. Used to build ELF files to boot in ESP8266.
- Began analysis of TP-Link's Tether mobile app. Performed basic reverse engineering and analysis today.

21st June 2019
--------------

- Began learning kernel exploitation
- Got shell via UART on the iBall Baton router. Explored the commands.
- Enumerated the router OS, which was eCos
- But were unable to exploit anything due to lack of documentation 
- Fuzzed the web UI, found some interesting "bugs", but nothing that could be
weaponized

24th June 2019
--------------

- Reverse engineered the Fastrack Reflex apk. Found a bunch of interesting artifacts, listed below:
    Fastrack Reflex
    ---------------
    
    - hardcoded api keys in bj.class
    - api url at: prod.clove.khaapi.com
    - also found other subdomains: dev, pay, stage, qa
    - request needs the following headers:
        * x-clove-api-key: 6143c4170da44dc79e930d455e6702cc
        * x-clove-api-debug-token: hardcoded as "akshata"
        * x-clove-api-version: 1
    - unable to determine what canonical path the request needs to be made to
- Wrote some Python scripts to disassemble ARM32 binaries. They can be found at https://github.com/securelayer7/arm-py32. 
- Will try extending this into a full framework for IoT-related architectures

25th June 2019
--------------

- Today's project was the new smartlock, called BlueFPL
- Began with reverse engineering the OKLOK app. Following is the analysis report:

    OKLOK
    -----
    
    - com.oklok.y/app/app.class contains the API URL and (possibly) the key
    - com.oklok.y/app/activity contains some interesting bt/password activities
        * some hardcoded checks?
    - com.oklok.y/utils/b.class appears to have some kind of cryptography algo
    - com.oklok.y/utils/k.class has some hardcoded pins?
    - found the OAuth2 token hardcoded, and the API endpoint for authentication

- We then attempted parsing the HCI log of the BlueFPL lock
- Managed to isolate the packets being sent from the phone to unlock the lock
- Attempted a replay attack, which didn't work
- Setup gattacker on a laptop and RaspberryPi
    * tried to perform MITM
    * managed to spoof the RPi's mac address to match the lock
    * attempted a connection from the phone to the RPi, but this resulted in a crash in gattacker which we are unable to resolve

26th June 2019
--------------

26th June 2019
--------------

Today, we achieved a complete compromise of the smartlock ordered from Amazon (FB50). A CVE ID has been
requested, and the vendor has been notified.

- exploitation procedure:
    * having the mac address of a lock, the following info can be obtained:
        1. lock id
        2. barcode
        3. user name
    * with the barcode, the userid can be obtained
    * now, using the userid and lockid, the lock can be unbound from the owner
    * then, we can use our own userid, name and the lock's mac address to bind ourselves to the lock
    * we now have full control of the lock

- this info can be extracted from just knowing userid:
    * mac address
    * userid
    * lockid
    * barcode
    * username
    * email
    * lockkey
    * isAdmin is 0 (idk what that is)

